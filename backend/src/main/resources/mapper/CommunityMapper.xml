<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.wooreal.gravitygather.mapper.CommunityMapper">
    <select id="getArticleMasters">
        SELECT
            seq,
            title,
            description,
            created_at,
            updated_at
        FROM
            articlemaster
    </select>

    <select id="getArticlesAllCnt">
        SELECT
            count(*) as allCnt,
            CAST(count(*) / #{viewPageCnt} + 1 AS signed integer) as lastPage
        from
        article A
        <where>
            is_delete = false
            <if test="seq != null">
                AND A.seq = #{seq}
            </if>
            <if test="master_seq != null and master_seq != 0">
                AND A.master_seq = #{master_seq}
            </if>
            <if test="search != null and search != ''">
                AND (A.title like '%${search}%' or A.content like '%${search}%')
            </if>
        </where>
    </select>

    <select id="getArticles">
        SELECT
            A.seq,
            A.master_seq,
            A.title,
            A.content,
            A.user_seq,
            A.view_count,
            A.likes,
            A.created_at,
            A.updated_at,
            B.nickname,
            B.photo,
            (select count(*) from comment AA where AA.article_seq = A.seq and AA.is_delete = false) as comment_count
        from
            article A
        LEFT JOIN users B
        ON A.user_seq = B.seq
        <where>
            is_delete = false
            <if test="seq != null">
                AND A.seq = #{seq}
            </if>
            <if test="master_seq != null and master_seq != 0">
                AND A.master_seq = #{master_seq}
            </if>
            <if test="search != null and search != ''">
                AND (A.title like '%${search}%' or A.content like '%${search}%')
            </if>
        </where>
        <if test="order != null">
            <choose>
                <when test="order == 'desc'">
                    ORDER BY A.seq DESC
                </when>
                <when test="order == 'asc'">
                    ORDER BY A.seq ASC
                </when>
                <when test="order == 'like'">
                    ORDER BY A.likes DESC
                </when>
                <when test="order == 'comment'">
                    ORDER BY (select count(*) from comment AA where AA.article_seq = A.seq and AA.is_delete = false) DESC
                </when>
                <when test="order == 'view'">
                    ORDER BY A.view_count DESC
                </when>
            </choose>
        </if>
        LIMIT #{viewPageCnt} OFFSET #{offset}
    </select>

    <insert id="articleWrite">
        INSERT INTO article
        (
            master_seq,
            title,
            content,
            user_seq
        ) VALUES (
            #{master_seq},
            #{title},
            #{content},
            #{user_seq}
        )
    </insert>

    <update id="articleGoUpViewCount">
        UPDATE article SET
            view_count = view_count + 1
        WHERE
            seq = #{seq}
    </update>

    <select id="getComments">
        WITH RECURSIVE comment_hierarchy AS (
            SELECT
                A.seq,
                A.article_seq,
                A.parent_comment_seq,
                A.content,
                A.user_seq,
                A.likes,
                A.is_delete,
                A.created_at,
                A.updated_at,
                B.photo,
                B.nickname,
                A.seq AS root_seq
            FROM gravitygather.comment A
                 LEFT JOIN gravitygather.users B ON A.user_seq = B.seq
            <where>
                A.parent_comment_seq IS NULL
                <if test="seq != null">
                    AND A.seq = #{seq}
                </if>
                <if test="article_seq != null">
                    AND A.article_seq = #{article_seq}
                </if>
            </where>
            UNION ALL
            SELECT
                A.seq,
                A.article_seq,
                A.parent_comment_seq,
                A.content,
                A.user_seq,
                A.likes,
                A.is_delete,
                A.created_at,
                A.updated_at,
                B.photo,
                B.nickname,
                CH.root_seq
            FROM gravitygather.comment A
                 LEFT JOIN gravitygather.users B ON A.user_seq = B.seq
                 JOIN comment_hierarchy CH ON A.parent_comment_seq = CH.seq
            <where>
                <if test="seq != null">
                    A.seq = #{seq}
                </if>
                <if test="article_seq != null">
                    A.article_seq = #{article_seq}
                </if>
            </where>
        )
        SELECT * FROM comment_hierarchy ORDER BY root_seq, seq
    </select>

    <insert id="addComment">
        INSERT INTO comment
        (
            article_seq,
            parent_comment_seq,
            content,
            user_seq
        ) values (
            #{article_seq},
            #{parent_comment_seq},
            #{content},
            #{user_seq}
        )
    </insert>

    <update id="updateArticle">
        update article set
           master_seq = #{master_seq},
           title = #{title},
           content = #{content}
        where
            seq = #{seq}
    </update>

    <update id="deleteArticle">
        update article set
            is_delete = true
        where
            seq = #{seq}
    </update>

    <update id="likeArticle">
        update article set
        <choose>
            <when test="is_up == true">
                like = like + 1
            </when>
            <otherwise>
                like = like - 1
            </otherwise>
        </choose>
        where
            seq = #{content_seq}
    </update>

    <update id="likeComment">
        update comment set
        <choose>
            <when test="is_up == true">
                like = like + 1
            </when>
            <otherwise>
                like = like - 1
            </otherwise>
        </choose>
        where
        seq = #{content_seq}
    </update>

    <insert id="addLike">
        INSERT INTO like (
            mode,
            user_seq,
            is_up
        ) VALUES (
            #{mode},
            #{user_seq},
            #{is_up}
        )
    </insert>

    <delete id="deleteLike">
        delete from like
        where
            mode = #{mode}
        and #{user_seq}
        and #{content_seq}
    </delete>

</mapper>
